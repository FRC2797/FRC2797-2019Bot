// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2797.Robot2019.subsystems;


import org.usfirst.frc2797.Robot2019.commands.TeleopDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark frontRight;
    private Spark rearRight;
    private SpeedControllerGroup rightDrive;
    private Spark frontLeft;
    private Spark rearLeft;
    private SpeedControllerGroup leftDrive;
    private DifferentialDrive tankDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontRight = new Spark(0);
        addChild("frontRight",frontRight);
        frontRight.setInverted(false);
        
        rearRight = new Spark(1);
        addChild("rearRight",rearRight);
        rearRight.setInverted(false);
        
        rightDrive = new SpeedControllerGroup(frontRight, rearRight  );
        addChild("rightDrive",rightDrive);
        
        
        frontLeft = new Spark(2);
        addChild("frontLeft",frontLeft);
        frontLeft.setInverted(false);
        
        rearLeft = new Spark(3);
        addChild("rearLeft",rearLeft);
        rearLeft.setInverted(false);
        
        leftDrive = new SpeedControllerGroup(frontLeft, rearLeft  );
        addChild("leftDrive",leftDrive);
        
        
        tankDrive = new DifferentialDrive(rightDrive, leftDrive);
        addChild("TankDrive",tankDrive);
        tankDrive.setSafetyEnabled(true);
        tankDrive.setExpiration(0.1);
        tankDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double leftSpeed, double rightSpeed){
        tankDrive.tankDrive(-leftSpeed, -rightSpeed);
    }
}

